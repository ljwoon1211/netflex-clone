{"version":3,"file":"static/js/633.30971270.chunk.js","mappings":"iGAAO,SAASA,EAAcC,EAAYC,GACxC,MAAO,8BAA8BA,GAAkB,cAAcD,GACvE,C,kJCKA,MAEME,EAASC,EAAAA,GAAOC,GAAG;;;;EAMnBC,GAAMF,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAAI;;;;kCART;;;EAiBfG,GAAMJ,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAA0B;IAChDI,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAKE,EAAAA,EAAG;sBACHD;GACnB;;;;;;;;;EAWGE,GAAOR,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAAI;;sBAETQ,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,MAAMC,OAAO;;;;;;;;;EAWlDC,EAAcb,EAAAA,GAAOC,GAAuB;;IAE9Ca,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAMC,EAAQ,WAAa,WAAW;;;;;;;;;;;;;;;;;;EAoB9CC,EAAc,CAClBC,OAAQ,CAAEC,MAAO,GACjBC,MAAO,CACLD,MAAO,IACPE,GAAI,GACJC,WAAY,CAAEC,MAAO,GAAKC,SAAU,GAAKC,KAAM,WAI7CC,EAAc,CAClBC,OAASC,IAAiB,CACxBC,EAAGD,EAAY,EAAIE,OAAOC,WAAa,GAAKD,OAAOC,WAAa,IAElEC,QAAS,CAAEH,EAAG,GACdI,KAAOL,IAAiB,CACtBC,EAAGD,EAAY,GAAKE,OAAOC,WAAa,EAAID,OAAOC,WAAa,KAI9DG,EAAe,CACnBd,MAAO,CACLe,QAAS,EACTb,WAAY,CAAEC,MAAO,GAAKC,SAAU,GAAKC,KAAM,WA+EnD,EAvEgDW,IAAe,IAAd,KAAEC,GAAMD,EACvD,MAAME,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAC5Bd,EAAWe,IAAgBD,EAAAA,EAAAA,UAAS,GAIrCE,EAAeC,IACdR,IACLM,EAAaE,GACbJ,GAAUK,IACR,MAAMC,EAAWC,KAAKC,KAAKZ,EAAKa,QAAQC,OA3GzB,GA2GkD,EACjE,OAAON,EAAe,EAClBC,IAASC,EACP,EACAD,EAAO,EACA,IAATA,EACAC,EACAD,EAAO,CAAC,IACZ,EAGJ,OACEM,EAAAA,EAAAA,MAACpD,EAAM,CAAAqD,SAAA,EACLC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,OAAQ5B,EAAW6B,SAAS,EAAMJ,UACjDC,EAAAA,EAAAA,KAACnD,EAAG,CACFuD,SAAUhC,EACV+B,QAAQ,SACRE,QAAQ,UACR1B,KAAK,OACLX,WAAY,CAAEG,KAAM,QAASD,SAAU,GAEvCgC,OAAQ5B,EAAUyB,SAEb,OAAJhB,QAAI,IAAJA,OAAI,EAAJA,EAAMa,QACJU,MAAM,GACNA,MApIQ,EAoIFpB,EApIE,GAoIqBA,EAAQ,IACrCqB,KAAKC,IACJR,EAAAA,EAAAA,KAACjD,EAAG,CACF0D,SAAUC,OAAOF,EAAMhE,IAEvB4D,SAAUzC,EACVgD,WAAW,QACXR,QAAQ,SACRnC,WAAY,CAAEG,KAAM,SACpBlB,UAAUV,EAAAA,EAAAA,GAAciE,EAAMI,cAAe,QAC7CC,QAASA,KAAMC,OAzCPC,EAyCoBP,EAAMhE,GAzCNwC,EAAS,WAAW+B,KAAxCA,KAyC8B,EAAAhB,UAEtCC,EAAAA,EAAAA,KAAC7C,EAAI,CAACiD,SAAUxB,EAAamB,UAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKS,EAAMQ,WATRR,EAAMhE,OATZ0C,MAyBTc,EAAAA,EAAAA,KAACxC,EAAW,CAACE,OAAO,EAAMmD,QAASA,IAAMvB,GAAa,GAAGS,UACvDC,EAAAA,EAAAA,KAAA,OAAKiB,MAAM,6BAA6BC,QAAQ,cAAanB,UAC3DC,EAAAA,EAAAA,KAAA,QAAMmB,EAAE,qWAIZnB,EAAAA,EAAAA,KAACxC,EAAW,CAACE,OAAO,EAAOmD,QAASA,IAAMvB,EAAY,GAAGS,UACvDC,EAAAA,EAAAA,KAAA,OAAKiB,MAAM,6BAA6BC,QAAQ,cAAanB,UAC3DC,EAAAA,EAAAA,KAAA,QAAMmB,EAAE,gWAGL,E,cCxKb,MAAMC,EAAUC,mCACVC,EAAYD,+BAGX,SAASE,IACd,OAAOC,MAAM,GAAGF,+BAAuCF,KAAWK,MAC/DC,GAAaA,EAASC,QAE3B,CAEO,SAASC,IACd,OAAOJ,MAAM,GAAGF,6BAAqCF,KAAWK,MAC7DC,GAAaA,EAASC,QAE3B,CAEO,SAASE,IACd,OAAOL,MAAM,GAAGF,4BAAoCF,KAAWK,MAC5DC,GAAaA,EAASC,QAE3B,CClBA,MA2BA,EA3ByBG,KACvB,MAAMC,GAAoBC,EAAAA,EAAAA,GAA2B,CACnDC,SAAU,CAAC,eAAgB,cAC3BC,QAASX,IAGLY,GAAsBH,EAAAA,EAAAA,GAA6B,CACvDC,SAAU,CAAC,iBAAkB,YAC7BC,QAASN,IAGLQ,GAAsBJ,EAAAA,EAAAA,GAA6B,CACvDC,SAAU,CAAC,iBAAkB,YAC7BC,QAASL,IAGX,MAAO,CACLQ,aAAcN,EAAkBhD,MAAQ,KACxCuD,eAAgBH,EAAoBpD,MAAQ,KAC5CwD,eAAgBH,EAAoBrD,MAAQ,KAC5CyD,iBAAkBT,EAAkBU,WACpCC,mBAAoBP,EAAoBM,WACxCE,mBAAoBP,EAAoBK,WACxCG,MAAOb,EAAkBa,OAAST,EAAoBS,OAASR,EAAoBQ,MACpF,ECjBGC,EAAUlG,EAAAA,GAAOC,GAAG;;EAIpBkG,EAASnG,EAAAA,GAAOC,GAAG;;;;;EAOnBmG,EAASpG,EAAAA,GAAOC,GAAyB;;;;;;;;;UASpCoG,GAAUA,EAAM/F;;EAIrBgG,EAAgBtG,EAAAA,GAAOC,GAAG;;;;;;;EAS1BsG,EAAiBvG,EAAAA,GAAOC,GAAG;;;;;EAM3BuG,EAAQxG,EAAAA,GAAOyG,EAAE;;;EAIjBC,EAAW1G,EAAAA,GAAO2G,CAAC;;;EAKnBC,GAAU5G,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAAI;;;;;;;EAS5B4G,GAAW7G,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAA0B;;;;SAI/CoG,GAAUA,EAAMS,SAAW;;;;sBAIdT,GAAUA,EAAM3F,MAAMC,MAAMC;;;EAK7CmG,EAAW/G,EAAAA,GAAOC,GAAG;;;;;EAMrB+G,EAAWhH,EAAAA,GAAOiH,EAAE;WACdZ,GAAUA,EAAM3F,MAAMwG,MAAMtG;;;;;EAOlCuG,EAAcnH,EAAAA,GAAO2G,CAAC;;;;WAIhBN,GAAUA,EAAM3F,MAAMwG,MAAMtG;EAGlCwG,EAAWpH,EAAAA,GAAOqH,EAAE;;WAEdhB,GAAUA,EAAM3F,MAAMwG,MAAMtG;EAGzB,SAAS0G,IACtB,MAAMjF,GAAWC,EAAAA,EAAAA,MACXiF,GAA2CC,EAAAA,EAAAA,IAAS,gBAEpD,aACJ9B,EAAY,eACZC,EAAc,eACdC,EAAc,iBACdC,EAAgB,mBAChBE,EAAkB,mBAClBC,GACEb,KAEE,QAAEsC,IAAYC,EAAAA,EAAAA,KAGdC,GACU,OAAdJ,QAAc,IAAdA,OAAc,EAAdA,EAAgBK,OAAO/H,KACvB,CAAC6F,EAAcC,EAAgBC,GAC5BiC,SAASzF,IAAa,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMa,UAAW,KACnC6E,MAAMjE,GAAUE,OAAOF,EAAMhE,MAAQ0H,EAAeK,OAAO/H,KAEhE,OACEwD,EAAAA,EAAAA,KAAC6C,EAAO,CAAA9C,SACLyC,GAAoBE,GAAsBC,GACzC3C,EAAAA,EAAAA,KAAC8C,EAAM,CAAA/C,SAAC,iBAERD,EAAAA,EAAAA,MAAA4E,EAAAA,SAAA,CAAA3E,SAAA,EACED,EAAAA,EAAAA,MAACiD,EAAM,CAAC9F,UAAUV,EAAAA,EAAAA,IAA0B,OAAZ8F,QAAY,IAAZA,OAAY,EAAZA,EAAczC,QAAQ,GAAGgB,gBAAiB,IAAIb,SAAA,EAC5EC,EAAAA,EAAAA,KAACmD,EAAK,CAAApD,SAAc,OAAZsC,QAAY,IAAZA,OAAY,EAAZA,EAAczC,QAAQ,GAAGoB,SACjChB,EAAAA,EAAAA,KAACqD,EAAQ,CAAAtD,SAAc,OAAZsC,QAAY,IAAZA,OAAY,EAAZA,EAAczC,QAAQ,GAAG+E,YACpC7E,EAAAA,EAAAA,MAACmD,EAAa,CAAAlD,SAAA,EACZC,EAAAA,EAAAA,KAAC+D,EAAQ,CAAAhE,SAAC,mBACVC,EAAAA,EAAAA,KAAC4E,EAAW,CAAC7F,KAAMsD,WAGvBvC,EAAAA,EAAAA,MAACoD,EAAc,CAAAnD,SAAA,EACbC,EAAAA,EAAAA,KAAC+D,EAAQ,CAAAhE,SAAC,sBACVC,EAAAA,EAAAA,KAAC4E,EAAW,CAAC7F,KAAMuD,KACnBtC,EAAAA,EAAAA,KAAC+D,EAAQ,CAAAhE,SAAC,qBACVC,EAAAA,EAAAA,KAAC4E,EAAW,CAAC7F,KAAMwD,QAGrBvC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAAAF,SACbmE,GACCpE,EAAAA,EAAAA,MAAA4E,EAAAA,SAAA,CAAA3E,SAAA,EACEC,EAAAA,EAAAA,KAACuD,EAAO,CAAC1C,QA/BAgE,IAAM7F,EAAS,KA+BUL,KAAM,CAAEE,QAAS,GAAKwB,QAAS,CAAExB,QAAS,MAC5EmB,EAAAA,EAAAA,KAACwD,EAAQ,CAAC/C,SAAUyD,EAAeK,OAAO/H,GAAIiH,SAAUW,EAAQU,MAAM/E,SACnEuE,IACCxE,EAAAA,EAAAA,MAAA4E,EAAAA,SAAA,CAAA3E,SAAA,EACEC,EAAAA,EAAAA,KAAC0D,EAAQ,CACPqB,MAAO,CACLC,gBAAiB,qDAAoDzI,EAAAA,EAAAA,GACnE+H,EAAa1D,cACb,eAINZ,EAAAA,EAAAA,KAAC2D,EAAQ,CAAA5D,SAAEuE,EAAatD,SACxBhB,EAAAA,EAAAA,KAAC8D,EAAW,CAAA/D,SAAEuE,EAAaK,mBAKjC,WAMhB,C","sources":["utils/utils.ts","components/MovieSlider.tsx","services/movieService.ts","hooks/useGetMoviesData.tsx","pages/Home.tsx"],"sourcesContent":["export function makeImagePath(id: string, format?: string) {\n  return `https://image.tmdb.org/t/p/${format ? format : \"original\"}/${id}`\n}","import { AnimatePresence, motion } from \"framer-motion\";\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled, { css } from \"styled-components\";\nimport { makeImagePath } from \"../utils/utils\";\nimport { IGetMoviesResult, IGetTopLatedMovies, IGetUpcomingMovies } from \"../types/movieTypes\";\n\nconst SLIDE_OFFSET = 6; // 페이지네이션 개수\n\nconst Slider = styled.div`\n  position: relative;\n  width: 100%;\n  height: 200px;\n`;\n\nconst Row = styled(motion.div)`\n  display: grid;\n  gap: 10px;\n  margin-bottom: 5px;\n  grid-template-columns: repeat(${SLIDE_OFFSET}, 1fr);\n  position: absolute;\n  width: 100%;\n`;\n\nconst Box = styled(motion.div)<{ $bgPhoto: string }>`\n  ${({ $bgPhoto }) => css`\n    background: url(${$bgPhoto}) center/cover no-repeat, white;\n  `}\n  height: 200px;\n  cursor: pointer;\n  &:first-child {\n    transform-origin: center left;\n  }\n  &:last-child {\n    transform-origin: center right;\n  }\n`;\n\nconst Info = styled(motion.div)`\n  padding: 10px;\n  background-color: ${({ theme }) => theme.black.lighter};\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  h4 {\n    text-align: center;\n    font-size: 18px;\n  }\n`;\n\nconst ArrowButton = styled.div<{ $left: boolean }>`\n  position: absolute;\n  ${({ $left }) => ($left ? \"left: 0;\" : \"right: 0;\")}\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    width: 50px;\n    height: 50px;\n    opacity: 0.5;\n    transition: opacity 0.2s ease-in-out, fill 0.2s ease-in-out;\n  }\n\n  &:hover svg {\n    fill: white;\n    opacity: 1;\n  }\n`;\n\nconst boxVariants = {\n  normal: { scale: 1 },\n  hover: {\n    scale: 1.3,\n    y: -80,\n    transition: { delay: 0.5, duration: 0.1, type: \"tween\" },\n  },\n};\n\nconst rowVariants = {\n  hidden: (direction: number) => ({\n    x: direction > 0 ? window.outerWidth + 5 : -window.outerWidth - 5,\n  }),\n  visible: { x: 0 },\n  exit: (direction: number) => ({\n    x: direction > 0 ? -window.outerWidth - 5 : window.outerWidth + 5,\n  }),\n};\n\nconst infoVariants = {\n  hover: {\n    opacity: 1,\n    transition: { delay: 0.5, duration: 0.1, type: \"tween\" },\n  },\n};\n\ninterface MovieSliderProps {\n  data?: IGetMoviesResult | IGetTopLatedMovies | IGetUpcomingMovies | null;\n}\n\nconst MovieSlider: React.FC<MovieSliderProps> = ({ data }) => {\n  const navigate = useNavigate();\n  const [index, setIndex] = useState(0);\n  const [direction, setDirection] = useState(1);\n\n  const onBoxClicked = (movieId: number) => navigate(`/movies/${movieId}`);\n\n  const changeIndex = (newDirection: number) => {\n    if (!data) return;\n    setDirection(newDirection);\n    setIndex((prev) => {\n      const maxIndex = Math.ceil(data.results.length / SLIDE_OFFSET) - 1;\n      return newDirection > 0\n        ? prev === maxIndex\n          ? 0\n          : prev + 1\n        : prev === 0\n        ? maxIndex\n        : prev - 1;\n    });\n  };\n\n  return (\n    <Slider>\n      <AnimatePresence custom={direction} initial={false}>\n        <Row\n          variants={rowVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          transition={{ type: \"tween\", duration: 1 }}\n          key={index}\n          custom={direction}\n        >\n          {data?.results\n            .slice(1)\n            .slice(index * SLIDE_OFFSET, (index + 1) * SLIDE_OFFSET)\n            .map((movie) => (\n              <Box\n                layoutId={String(movie.id)}\n                key={movie.id}\n                variants={boxVariants}\n                whileHover=\"hover\"\n                initial=\"normal\"\n                transition={{ type: \"tween\" }}\n                $bgPhoto={makeImagePath(movie.backdrop_path, \"w500\")}\n                onClick={() => onBoxClicked(movie.id)}\n              >\n                <Info variants={infoVariants}>\n                  <h4>{movie.title}</h4>\n                </Info>\n              </Box>\n            ))}\n        </Row>\n      </AnimatePresence>\n\n      <ArrowButton $left={true} onClick={() => changeIndex(-1)}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path d=\"M48 256a208 208 0 1 1 416 0A208 208 0 1 1 48 256zm464 0A256 256 0 1 0 0 256a256 256 0 1 0 512 0zM217.4 376.9c4.2 4.5 10.1 7.1 16.3 7.1c12.3 0 22.3-10 22.3-22.3l0-57.7 96 0c17.7 0 32-14.3 32-32l0-32c0-17.7-14.3-32-32-32l-96 0 0-57.7c0-12.3-10-22.3-22.3-22.3c-6.2 0-12.1 2.6-16.3 7.1L117.5 242.2c-3.5 3.8-5.5 8.7-5.5 13.8s2 10.1 5.5 13.8l99.9 107.1z\" />\n        </svg>\n      </ArrowButton>\n\n      <ArrowButton $left={false} onClick={() => changeIndex(1)}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path d=\"M464 256A208 208 0 1 1 48 256a208 208 0 1 1 416 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM294.6 151.2c-4.2-4.6-10.1-7.2-16.4-7.2C266 144 256 154 256 166.3l0 41.7-96 0c-17.7 0-32 14.3-32 32l0 32c0 17.7 14.3 32 32 32l96 0 0 41.7c0 12.3 10 22.3 22.3 22.3c6.2 0 12.1-2.6 16.4-7.2l84-91c3.5-3.8 5.4-8.7 5.4-13.9s-1.9-10.1-5.4-13.9l-84-91z\" />\n        </svg>\n      </ArrowButton>\n    </Slider>\n  );\n};\n\nexport default MovieSlider;\n","import React from 'react'\n\nconst API_KEY = process.env.REACT_APP_API_KEY\nconst BASE_PATH = process.env.REACT_APP_API_BASE_PATH\n\n\nexport function getLatestMovies() {\n  return fetch(`${BASE_PATH}/movie/now_playing?api_key=${API_KEY}`).then(\n    (response) => response.json()\n  )\n}\n\nexport function getTopLatedMovies() {\n  return fetch(`${BASE_PATH}/movie/top_rated?api_key=${API_KEY}`).then(\n    (response) => response.json()\n  )\n}\n\nexport function getUpcomingMovies() {\n  return fetch(`${BASE_PATH}/movie/upcoming?api_key=${API_KEY}`).then(\n    (response) => response.json()\n  )\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getLatestMovies, getTopLatedMovies, getUpcomingMovies } from \"../services/movieService\";\nimport { IGetMoviesResult, IGetTopLatedMovies, IGetUpcomingMovies } from \"../types/movieTypes\";\n\nconst useGetMoviesData = () => {\n  const latestMoviesQuery = useQuery<IGetMoviesResult>({\n    queryKey: [\"latestMovies\", \"nowPlaying\"],\n    queryFn: getLatestMovies,\n  });\n\n  const topRatedMoviesQuery = useQuery<IGetTopLatedMovies>({\n    queryKey: [\"topRatedMovies\", \"topRated\"],\n    queryFn: getTopLatedMovies,\n  });\n\n  const upcomingMoviesQuery = useQuery<IGetUpcomingMovies>({\n    queryKey: [\"upcomingMovies\", \"upcoming\"],\n    queryFn: getUpcomingMovies,\n  });\n\n  return {\n    latestMovies: latestMoviesQuery.data || null,\n    topRatedMovies: topRatedMoviesQuery.data || null,\n    upcomingMovies: upcomingMoviesQuery.data || null,\n    isFetchingLatest: latestMoviesQuery.isFetching, // 개별 `isFetching`\n    isFetchingTopRated: topRatedMoviesQuery.isFetching,\n    isFetchingUpcoming: upcomingMoviesQuery.isFetching,\n    error: latestMoviesQuery.error || topRatedMoviesQuery.error || upcomingMoviesQuery.error,\n  };\n};\n\nexport default useGetMoviesData;\n","import { useQuery } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { getLatestMovies } from \"../services/movieService\";\nimport styled from \"styled-components\";\nimport { makeImagePath } from \"../utils/utils\";\nimport { AnimatePresence, motion, useMotionValueEvent, useScroll } from \"framer-motion\";\nimport { PathMatch, useMatch, useNavigate } from \"react-router-dom\";\nimport MovieSlider from \"../components/MovieSlider\";\nimport { IGetMoviesResult } from \"../types/movieTypes\";\nimport useGetMoviesData from \"../hooks/useGetMoviesData\";\n\nconst Wrapper = styled.div`\n  background: black;\n`;\n\nconst Loader = styled.div`\n  height: 20vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Banner = styled.div<{ $bgPhoto: string }>`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  /* padding: 60px; */\n\n  // 이렇게 하면 위쪽은 밝고, 아래쪽이 어두운 이미지 형태 백그라운드 만들기 가능\n  background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)),\n    url(${(props) => props.$bgPhoto});\n  background-size: cover;\n`;\n\nconst SliderWrapper = styled.div`\n  /* position: relative; */\n  padding: 20px 0;\n  padding-top: 50px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: black;\n  gap: 20px;\n`;\nconst Title = styled.h2`\n  font-size: 68px;\n  margin-bottom: 20px;\n`;\nconst OverView = styled.p`\n  font-size: 30px;\n  width: 50%;\n`;\n\nconst Overlay = styled(motion.div)`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  opacity: 0;\n`;\n\nconst BigMovie = styled(motion.div)<{ $scrollY: number }>`\n  position: absolute;\n  width: 40vw;\n  height: 80vh;\n  top: ${(props) => props.$scrollY + 100}px;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  background-color: ${(props) => props.theme.black.lighter};\n  border-radius: 15px;\n  overflow: hidden;\n`;\n\nconst BigCover = styled.div`\n  width: 100%;\n  background-size: cover;\n  background-position: center center;\n  height: 400px;\n`;\nconst BigTitle = styled.h3`\n  color: ${(props) => props.theme.white.lighter};\n  padding: 20px;\n  font-size: 46px;\n  position: relative;\n  top: -80px;\n`;\n\nconst BigOverview = styled.p`\n  padding: 20px;\n  position: relative;\n  top: -80px;\n  color: ${(props) => props.theme.white.lighter};\n`;\n\nconst Subtitle = styled.h6`\n  font-size: 40px;\n  color: ${(props) => props.theme.white.lighter};\n`;\n\nexport default function Home() {\n  const navigate = useNavigate();\n  const moviePathMatch: PathMatch<string> | null = useMatch(\"/movies/:id\");\n\n  const {\n    latestMovies,\n    topRatedMovies,\n    upcomingMovies,\n    isFetchingLatest,\n    isFetchingTopRated,\n    isFetchingUpcoming,\n  } = useGetMoviesData();\n\n  const { scrollY } = useScroll();\n\n  const onOverlayClick = () => navigate(`/`);\n  const clickedMovie =\n    moviePathMatch?.params.id &&\n    [latestMovies, topRatedMovies, upcomingMovies]\n      .flatMap((data) => data?.results || [])\n      .find((movie) => String(movie.id) === moviePathMatch.params.id);\n\n  return (\n    <Wrapper>\n      {isFetchingLatest || isFetchingTopRated || isFetchingUpcoming ? (\n        <Loader> Loading...</Loader>\n      ) : (\n        <>\n          <Banner $bgPhoto={makeImagePath(latestMovies?.results[0].backdrop_path || \"\")}>\n            <Title>{latestMovies?.results[0].title}</Title>\n            <OverView>{latestMovies?.results[0].overview}</OverView>\n            <SliderWrapper>\n              <Subtitle>Latest movies</Subtitle>\n              <MovieSlider data={latestMovies} />\n            </SliderWrapper>\n          </Banner>\n          <ContentWrapper>\n            <Subtitle>Top Rated movies</Subtitle>\n            <MovieSlider data={topRatedMovies} />\n            <Subtitle>Upcoming movies</Subtitle>\n            <MovieSlider data={upcomingMovies} />\n          </ContentWrapper>\n\n          <AnimatePresence>\n            {moviePathMatch ? (\n              <>\n                <Overlay onClick={onOverlayClick} exit={{ opacity: 0 }} animate={{ opacity: 1 }} />\n                <BigMovie layoutId={moviePathMatch.params.id} $scrollY={scrollY.get()}>\n                  {clickedMovie && (\n                    <>\n                      <BigCover\n                        style={{\n                          backgroundImage: `linear-gradient(to top, black, transparent), url(${makeImagePath(\n                            clickedMovie.backdrop_path,\n                            \"w500\",\n                          )})`,\n                        }}\n                      />\n                      <BigTitle>{clickedMovie.title}</BigTitle>\n                      <BigOverview>{clickedMovie.overview}</BigOverview>\n                    </>\n                  )}\n                </BigMovie>\n              </>\n            ) : null}\n          </AnimatePresence>\n        </>\n      )}\n    </Wrapper>\n  );\n}\n"],"names":["makeImagePath","id","format","Slider","styled","div","Row","motion","Box","_ref","$bgPhoto","css","Info","_ref2","theme","black","lighter","ArrowButton","_ref3","$left","boxVariants","normal","scale","hover","y","transition","delay","duration","type","rowVariants","hidden","direction","x","window","outerWidth","visible","exit","infoVariants","opacity","_ref4","data","navigate","useNavigate","index","setIndex","useState","setDirection","changeIndex","newDirection","prev","maxIndex","Math","ceil","results","length","_jsxs","children","_jsx","AnimatePresence","custom","initial","variants","animate","slice","map","movie","layoutId","String","whileHover","backdrop_path","onClick","onBoxClicked","movieId","title","xmlns","viewBox","d","API_KEY","process","BASE_PATH","getLatestMovies","fetch","then","response","json","getTopLatedMovies","getUpcomingMovies","useGetMoviesData","latestMoviesQuery","useQuery","queryKey","queryFn","topRatedMoviesQuery","upcomingMoviesQuery","latestMovies","topRatedMovies","upcomingMovies","isFetchingLatest","isFetching","isFetchingTopRated","isFetchingUpcoming","error","Wrapper","Loader","Banner","props","SliderWrapper","ContentWrapper","Title","h2","OverView","p","Overlay","BigMovie","$scrollY","BigCover","BigTitle","h3","white","BigOverview","Subtitle","h6","Home","moviePathMatch","useMatch","scrollY","useScroll","clickedMovie","params","flatMap","find","_Fragment","overview","MovieSlider","onOverlayClick","get","style","backgroundImage"],"sourceRoot":""}