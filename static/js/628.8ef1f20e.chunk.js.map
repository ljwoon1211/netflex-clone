{"version":3,"file":"static/js/628.8ef1f20e.chunk.js","mappings":"mNAEA,MAAMA,EAAUC,mCACVC,EAAYD,+BAGX,SAASE,IACd,OAAOC,MAAM,GAAGF,2BAAmCF,KAAWK,MAC3DC,GAAaA,EAASC,QAE3B,CAGO,SAASC,IACd,OAAOJ,MAAM,GAAGF,6BAAqCF,KAAWK,MAC7DC,GAAaA,EAASC,QAE3B,CAEO,SAASE,IACd,OAAOL,MAAM,GAAGF,0BAAkCF,KAAWK,MAC1DC,GAAaA,EAASC,QAE3B,CAEO,SAASG,IACd,OAAON,MAAM,GAAGF,wBAAgCF,KAAWK,MACxDC,GAAaA,EAASC,QAE3B,CCpBA,MAuCA,EAvCsBI,KACpB,MAAMC,GAAmBC,EAAAA,EAAAA,GAAoC,CAC3DC,SAAU,CAAC,YACXC,QAASZ,IAGLa,GAAiBH,EAAAA,EAAAA,GAAkC,CACvDC,SAAU,CAAC,aACXC,QAASP,IAGLS,GAAkBJ,EAAAA,EAAAA,GAAmC,CACzDC,SAAU,CAAC,cACXC,QAASL,IAGLQ,GAAmBL,EAAAA,EAAAA,GAA+B,CACtDC,SAAU,CAAC,eACXC,QAASN,IAGX,MAAO,CACLU,YAAaP,EAAiBQ,MAAQ,KACtCC,UAAWL,EAAeI,MAAQ,KAClCE,WAAYL,EAAgBG,MAAQ,KACpCG,YAAaL,EAAiBE,MAAQ,KACtCI,mBAAoBZ,EAAiBa,WACrCC,iBAAkBV,EAAeS,WACjCE,kBAAmBV,EAAgBQ,WACnCG,mBAAoBV,EAAiBO,WAErCI,MACEjB,EAAiBiB,OACjBb,EAAea,OACfZ,EAAgBY,OAChBX,EAAiBW,MACpB,E,aC/BH,MAEMC,EAASC,EAAAA,GAAOC,GAAG;;;;EAMnBC,GAAMF,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAAI;;;;kCART;;;EAiBfG,GAAMJ,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAA0B;IAChDI,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAKE,EAAAA,EAAG;sBACHD;GACnB;;;;;;;;;EAWGE,GAAOR,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAAI;;sBAETQ,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,MAAMC,OAAO;;;;;;;;;EAWlDC,EAAcb,EAAAA,GAAOC,GAAuB;;IAE9Ca,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAMC,EAAQ,WAAa,WAAW;;;;;;;;;;;;;;;;;;EAoB9CC,EAAc,CAClBC,OAAQ,CAAEC,MAAO,GACjBC,MAAO,CACLD,MAAO,IACPE,GAAI,GACJC,WAAY,CAAEC,MAAO,GAAKC,SAAU,GAAKC,KAAM,WAI7CC,EAAc,CAClBC,OAASC,IAAiB,CACxBC,EAAGD,EAAY,EAAIE,OAAOC,WAAa,GAAKD,OAAOC,WAAa,IAElEC,QAAS,CAAEH,EAAG,GACdI,KAAOL,IAAiB,CACtBC,EAAGD,EAAY,GAAKE,OAAOC,WAAa,EAAID,OAAOC,WAAa,KAI9DG,EAAe,CACnBd,MAAO,CACLe,QAAS,EACTb,WAAY,CAAEC,MAAO,GAAKC,SAAU,GAAKC,KAAM,WAqFnD,EAvE0CW,IAAe,IAAd,KAAE9C,GAAM8C,EACjD,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAC5Bb,EAAWc,IAAgBD,EAAAA,EAAAA,UAAS,GAIrCE,EAAeC,IACdtD,IACLoD,EAAaE,GACbJ,GAAUK,IACR,MAAMC,EAAWC,KAAKC,KAAK1D,EAAK2D,QAAQC,OAjHzB,GAiHkD,EACjE,OAAON,EAAe,EAClBC,IAASC,EACP,EACAD,EAAO,EACA,IAATA,EACAC,EACAD,EAAO,CAAC,IACZ,EAGJ,OACEM,EAAAA,EAAAA,MAACnD,EAAM,CAAAoD,SAAA,EACLC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,OAAQ3B,EAAW4B,SAAS,EAAMJ,UACjDC,EAAAA,EAAAA,KAAClD,EAAG,CACFsD,SAAU/B,EACV8B,QAAQ,SACRE,QAAQ,UACRzB,KAAK,OACLX,WAAY,CAAEG,KAAM,QAASD,SAAU,GAEvC+B,OAAQ3B,EAAUwB,SAEb,OAAJ9D,QAAI,IAAJA,OAAI,EAAJA,EAAM2D,QACJU,MAAM,GACNA,MA1IQ,EA0IFpB,EA1IE,GA0IqBA,EAAQ,IACrCqB,KAAKC,IACJR,EAAAA,EAAAA,KAAChD,EAAG,CACFyD,SAAUC,OAAOF,EAAGG,IAEpBP,SAAUxC,EACVgD,WAAW,QACXT,QAAQ,SACRlC,WAAY,CAAEG,KAAM,SACpBlB,UAAU2D,EAAAA,EAAAA,GAAcL,EAAGM,cAAe,QAC1CC,QAASA,KAAMC,OAzCPC,EAyCoBT,EAAGG,GAzCN3B,EAAS,QAAQiC,KAAlCA,KAyC2B,EAAAlB,UAEnCC,EAAAA,EAAAA,KAAC5C,EAAI,CAACgD,SAAUvB,EAAakB,UAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAKS,EAAGU,UATLV,EAAGG,OATTzB,MAyBTc,EAAAA,EAAAA,KAACvC,EAAW,CAACE,OAAO,EAAMoD,QAASA,IAAMzB,GAAa,GAAGS,UACvDC,EAAAA,EAAAA,KAAA,OAAKmB,MAAM,6BAA6BC,QAAQ,cAAarB,UAC3DC,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,qWAIZrB,EAAAA,EAAAA,KAACvC,EAAW,CAACE,OAAO,EAAOoD,QAASA,IAAMzB,EAAY,GAAGS,UACvDC,EAAAA,EAAAA,KAAA,OAAKmB,MAAM,6BAA6BC,QAAQ,cAAarB,UAC3DC,EAAAA,EAAAA,KAAA,QAAMqB,EAAE,gWAGL,EChLPC,EAAU1E,EAAAA,GAAOC,GAAG;;EAIpB0E,EAAS3E,EAAAA,GAAOC,GAAG;;;;;EAOnB2E,EAAS5E,EAAAA,GAAOC,GAAyB;;;;;;;;;UASpC4E,GAAUA,EAAMvE;;EAIrBwE,EAAgB9E,EAAAA,GAAOC,GAAG;;;;;;;EAS1B8E,EAAiB/E,EAAAA,GAAOC,GAAG;;;;;EAM3B+E,EAAQhF,EAAAA,GAAOiF,EAAE;;;EAIjBC,EAAWlF,EAAAA,GAAOmF,CAAC;;;EAKnBC,GAAUpF,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAAI;;;;;;;EAS5BoF,GAAWrF,EAAAA,EAAAA,IAAOG,EAAAA,EAAOF,IAA0B;;;;SAI/C4E,GAAUA,EAAMS,SAAW;;;;sBAIdT,GAAUA,EAAMnE,MAAMC,MAAMC;;;EAK7C2E,EAAWvF,EAAAA,GAAOC,GAAG;;;;;EAMrBuF,EAAWxF,EAAAA,GAAOyF,EAAE;WACdZ,GAAUA,EAAMnE,MAAMgF,MAAM9E;;;;;EAOlC+E,EAAc3F,EAAAA,GAAOmF,CAAC;;;;WAIhBN,GAAUA,EAAMnE,MAAMgF,MAAM9E;EAGlCgF,EAAW5F,EAAAA,GAAO6F,EAAE;;WAEdhB,GAAUA,EAAMnE,MAAMgF,MAAM9E;EAGzB,SAASkF,IACtB,MAAM1D,GAAWC,EAAAA,EAAAA,MACX0D,GAA2CC,EAAAA,EAAAA,IAAS,aAEpD,YACJ5G,EAAW,UACXE,EAAS,WACTC,EAAU,YACVC,EAAW,mBACXC,EAAkB,iBAClBE,EAAgB,kBAChBC,EAAiB,mBACjBC,GACEjB,KAEE,QAAEqH,IAAYC,EAAAA,EAAAA,KAGdC,GACU,OAAdJ,QAAc,IAAdA,OAAc,EAAdA,EAAgBK,OAAOrC,KACvB,CAAC3E,EAAaE,EAAWE,EAAaD,GACnC8G,SAAShH,IAAa,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM2D,UAAW,KACnCsD,MAAMC,GAAUzC,OAAOyC,EAAMxC,MAAQgC,EAAeK,OAAOrC,KAEhE,OACEX,EAAAA,EAAAA,KAACsB,EAAO,CAAAvB,SACL1D,GAAsBE,GAAoBC,GAAqBC,GAC9DuD,EAAAA,EAAAA,KAACuB,EAAM,CAAAxB,SAAC,iBAERD,EAAAA,EAAAA,MAAAsD,EAAAA,SAAA,CAAArD,SAAA,EACED,EAAAA,EAAAA,MAAC0B,EAAM,CAACtE,UAAU2D,EAAAA,EAAAA,IAAuB,OAAT3E,QAAS,IAATA,OAAS,EAATA,EAAW0D,QAAQ,GAAGkB,gBAAiB,IAAIf,SAAA,EACzEC,EAAAA,EAAAA,KAAC4B,EAAK,CAAA7B,SAAW,OAAT7D,QAAS,IAATA,OAAS,EAATA,EAAW0D,QAAQ,GAAGyD,iBAC9BrD,EAAAA,EAAAA,KAAC8B,EAAQ,CAAA/B,SAAW,OAAT7D,QAAS,IAATA,OAAS,EAATA,EAAW0D,QAAQ,GAAG0D,YACjCxD,EAAAA,EAAAA,MAAC4B,EAAa,CAAA3B,SAAA,EACZC,EAAAA,EAAAA,KAACwC,EAAQ,CAAAzC,SAAC,kBACVC,EAAAA,EAAAA,KAACuD,EAAQ,CAACtH,KAAMC,WAGpB4D,EAAAA,EAAAA,MAAC6B,EAAc,CAAA5B,SAAA,EACbC,EAAAA,EAAAA,KAACwC,EAAQ,CAAAzC,SAAC,gBACVC,EAAAA,EAAAA,KAACuD,EAAQ,CAACtH,KAAMD,KAChBgE,EAAAA,EAAAA,KAACwC,EAAQ,CAAAzC,SAAC,oBACVC,EAAAA,EAAAA,KAACuD,EAAQ,CAACtH,KAAME,KAChB6D,EAAAA,EAAAA,KAACwC,EAAQ,CAAAzC,SAAC,eACVC,EAAAA,EAAAA,KAACuD,EAAQ,CAACtH,KAAMG,QAGlB4D,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAAAF,SACb4C,GACC7C,EAAAA,EAAAA,MAAAsD,EAAAA,SAAA,CAAArD,SAAA,EACEC,EAAAA,EAAAA,KAACgC,EAAO,CAACjB,QAjCAyC,IAAMxE,EAAS,QAiCUJ,KAAM,CAAEE,QAAS,GAAKuB,QAAS,CAAEvB,QAAS,MAC5EkB,EAAAA,EAAAA,KAACiC,EAAQ,CAACxB,SAAUkC,EAAeK,OAAOrC,GAAIuB,SAAUW,EAAQY,MAAM1D,SACnEgD,IACCjD,EAAAA,EAAAA,MAAAsD,EAAAA,SAAA,CAAArD,SAAA,EACEC,EAAAA,EAAAA,KAACmC,EAAQ,CACPuB,MAAO,CACLC,gBAAiB,qDAAoD9C,EAAAA,EAAAA,GACnEkC,EAAajC,cACb,eAINd,EAAAA,EAAAA,KAACoC,EAAQ,CAAArC,SAAEgD,EAAa7B,QACxBlB,EAAAA,EAAAA,KAACuC,EAAW,CAAAxC,SAAEgD,EAAaO,mBAKjC,WAMhB,C,iBCjLO,SAASzC,EAAcF,EAAYiD,GACxC,MAAO,8BAA8BA,GAAkB,cAAcjD,GACvE,C","sources":["services/tvService.ts","hooks/useGetTvsData.tsx","components/TvSlider.tsx","pages/Tv.tsx","utils/utils.ts"],"sourcesContent":["import React from 'react'\n\nconst API_KEY = process.env.REACT_APP_API_KEY\nconst BASE_PATH = process.env.REACT_APP_API_BASE_PATH\n\n\nexport function getOnTheAirTvs() {\n  return fetch(`${BASE_PATH}/tv/on_the_air?api_key=${API_KEY}`).then(\n    (response) => response.json()\n  )\n}\n\n\nexport function getAiringTvs() {\n  return fetch(`${BASE_PATH}/tv/airing_today?api_key=${API_KEY}`).then(\n    (response) => response.json()\n  )\n}\n\nexport function getTopLatedTvs() {\n  return fetch(`${BASE_PATH}/tv/top_rated?api_key=${API_KEY}`).then(\n    (response) => response.json()\n  )\n}\n\nexport function getPopularTs() {\n  return fetch(`${BASE_PATH}/tv/popular?api_key=${API_KEY}`).then(\n    (response) => response.json()\n  )\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getAiringTvs, getOnTheAirTvs, getPopularTs, getTopLatedTvs } from \"../services/tvService\";\nimport {\n  IGetAiringTVShowsResult,\n  IGetOnTheAirTVShowsResult,\n  IGetPopularTVShowsResult,\n  IGetTopTVShowsResult,\n} from \"../types/tvTypes\";\n\nconst useGetTvsData = () => {\n  const onTheAirTvsQuery = useQuery<IGetOnTheAirTVShowsResult>({\n    queryKey: [\"onTheAir\"],\n    queryFn: getOnTheAirTvs,\n  });\n\n  const airingTvsQuery = useQuery<IGetAiringTVShowsResult>({\n    queryKey: [\"airingTvs\"],\n    queryFn: getAiringTvs,\n  });\n\n  const popularTvsQuery = useQuery<IGetPopularTVShowsResult>({\n    queryKey: [\"popularTvs\"],\n    queryFn: getPopularTs,\n  });\n\n  const topRatedTvsQuery = useQuery<IGetTopTVShowsResult>({\n    queryKey: [\"topRatedTvs\"],\n    queryFn: getTopLatedTvs,\n  });\n\n  return {\n    onTheAirTvs: onTheAirTvsQuery.data || null,\n    airingTvs: airingTvsQuery.data || null,\n    popularTvs: popularTvsQuery.data || null,\n    topRatedTvs: topRatedTvsQuery.data || null,\n    isFetchingOnTheAir: onTheAirTvsQuery.isFetching, // 개별 `isFetching`\n    isFetchingAiring: airingTvsQuery.isFetching,\n    isFetchingPopular: popularTvsQuery.isFetching,\n    isFetchingTopRated: topRatedTvsQuery.isFetching,\n\n    error:\n      onTheAirTvsQuery.error ||\n      airingTvsQuery.error ||\n      popularTvsQuery.error ||\n      topRatedTvsQuery.error,\n  };\n};\n\nexport default useGetTvsData;\n","import { AnimatePresence, motion } from \"framer-motion\";\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled, { css } from \"styled-components\";\nimport { makeImagePath } from \"../utils/utils\";\n\nimport {\n  IGetAiringTVShowsResult,\n  IGetOnTheAirTVShowsResult,\n  IGetPopularTVShowsResult,\n  IGetTopTVShowsResult,\n} from \"../types/tvTypes\";\nimport { IGetTVShowsResult } from \"../types/searchTypes\";\n\nconst SLIDE_OFFSET = 6; // 페이지네이션 개수\n\nconst Slider = styled.div`\n  position: relative;\n  width: 100%;\n  height: 200px;\n`;\n\nconst Row = styled(motion.div)`\n  display: grid;\n  gap: 10px;\n  margin-bottom: 5px;\n  grid-template-columns: repeat(${SLIDE_OFFSET}, 1fr);\n  position: absolute;\n  width: 100%;\n`;\n\nconst Box = styled(motion.div)<{ $bgPhoto: string }>`\n  ${({ $bgPhoto }) => css`\n    background: url(${$bgPhoto}) center/cover no-repeat, white;\n  `}\n  height: 200px;\n  cursor: pointer;\n  &:first-child {\n    transform-origin: center left;\n  }\n  &:last-child {\n    transform-origin: center right;\n  }\n`;\n\nconst Info = styled(motion.div)`\n  padding: 10px;\n  background-color: ${({ theme }) => theme.black.lighter};\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  bottom: 0;\n  h4 {\n    text-align: center;\n    font-size: 18px;\n  }\n`;\n\nconst ArrowButton = styled.div<{ $left: boolean }>`\n  position: absolute;\n  ${({ $left }) => ($left ? \"left: 0;\" : \"right: 0;\")}\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    width: 50px;\n    height: 50px;\n    opacity: 0.5;\n    transition: opacity 0.2s ease-in-out, fill 0.2s ease-in-out;\n  }\n\n  &:hover svg {\n    fill: white;\n    opacity: 1;\n  }\n`;\n\nconst boxVariants = {\n  normal: { scale: 1 },\n  hover: {\n    scale: 1.3,\n    y: -80,\n    transition: { delay: 0.5, duration: 0.1, type: \"tween\" },\n  },\n};\n\nconst rowVariants = {\n  hidden: (direction: number) => ({\n    x: direction > 0 ? window.outerWidth + 5 : -window.outerWidth - 5,\n  }),\n  visible: { x: 0 },\n  exit: (direction: number) => ({\n    x: direction > 0 ? -window.outerWidth - 5 : window.outerWidth + 5,\n  }),\n};\n\nconst infoVariants = {\n  hover: {\n    opacity: 1,\n    transition: { delay: 0.5, duration: 0.1, type: \"tween\" },\n  },\n};\n\ninterface TvSliderProps {\n  data?:\n    | IGetAiringTVShowsResult\n    | IGetOnTheAirTVShowsResult\n    | IGetPopularTVShowsResult\n    | IGetTopTVShowsResult\n    | IGetTVShowsResult\n    | null;\n}\n\nconst TvSlider: React.FC<TvSliderProps> = ({ data }) => {\n  const navigate = useNavigate();\n  const [index, setIndex] = useState(0);\n  const [direction, setDirection] = useState(1);\n\n  const onBoxClicked = (tvId: number) => navigate(`/tvs/${tvId}`);\n\n  const changeIndex = (newDirection: number) => {\n    if (!data) return;\n    setDirection(newDirection);\n    setIndex((prev) => {\n      const maxIndex = Math.ceil(data.results.length / SLIDE_OFFSET) - 1;\n      return newDirection > 0\n        ? prev === maxIndex\n          ? 0\n          : prev + 1\n        : prev === 0\n        ? maxIndex\n        : prev - 1;\n    });\n  };\n\n  return (\n    <Slider>\n      <AnimatePresence custom={direction} initial={false}>\n        <Row\n          variants={rowVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          transition={{ type: \"tween\", duration: 1 }}\n          key={index}\n          custom={direction}\n        >\n          {data?.results\n            .slice(1)\n            .slice(index * SLIDE_OFFSET, (index + 1) * SLIDE_OFFSET)\n            .map((tv) => (\n              <Box\n                layoutId={String(tv.id)}\n                key={tv.id}\n                variants={boxVariants}\n                whileHover=\"hover\"\n                initial=\"normal\"\n                transition={{ type: \"tween\" }}\n                $bgPhoto={makeImagePath(tv.backdrop_path, \"w500\")}\n                onClick={() => onBoxClicked(tv.id)}\n              >\n                <Info variants={infoVariants}>\n                  <h4>{tv.name}</h4>\n                </Info>\n              </Box>\n            ))}\n        </Row>\n      </AnimatePresence>\n\n      <ArrowButton $left={true} onClick={() => changeIndex(-1)}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path d=\"M48 256a208 208 0 1 1 416 0A208 208 0 1 1 48 256zm464 0A256 256 0 1 0 0 256a256 256 0 1 0 512 0zM217.4 376.9c4.2 4.5 10.1 7.1 16.3 7.1c12.3 0 22.3-10 22.3-22.3l0-57.7 96 0c17.7 0 32-14.3 32-32l0-32c0-17.7-14.3-32-32-32l-96 0 0-57.7c0-12.3-10-22.3-22.3-22.3c-6.2 0-12.1 2.6-16.3 7.1L117.5 242.2c-3.5 3.8-5.5 8.7-5.5 13.8s2 10.1 5.5 13.8l99.9 107.1z\" />\n        </svg>\n      </ArrowButton>\n\n      <ArrowButton $left={false} onClick={() => changeIndex(1)}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path d=\"M464 256A208 208 0 1 1 48 256a208 208 0 1 1 416 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM294.6 151.2c-4.2-4.6-10.1-7.2-16.4-7.2C266 144 256 154 256 166.3l0 41.7-96 0c-17.7 0-32 14.3-32 32l0 32c0 17.7 14.3 32 32 32l96 0 0 41.7c0 12.3 10 22.3 22.3 22.3c6.2 0 12.1-2.6 16.4-7.2l84-91c3.5-3.8 5.4-8.7 5.4-13.9s-1.9-10.1-5.4-13.9l-84-91z\" />\n        </svg>\n      </ArrowButton>\n    </Slider>\n  );\n};\n\nexport default TvSlider;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { makeImagePath } from \"../utils/utils\";\nimport { AnimatePresence, motion, useScroll } from \"framer-motion\";\nimport { PathMatch, useMatch, useNavigate } from \"react-router-dom\";\nimport useGetTvsData from \"../hooks/useGetTvsData\";\nimport TvSlider from \"../components/TvSlider\";\nconst Wrapper = styled.div`\n  background: black;\n`;\n\nconst Loader = styled.div`\n  height: 20vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Banner = styled.div<{ $bgPhoto: string }>`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  /* padding: 60px; */\n\n  // 이렇게 하면 위쪽은 밝고, 아래쪽이 어두운 이미지 형태 백그라운드 만들기 가능\n  background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 1)),\n    url(${(props) => props.$bgPhoto});\n  background-size: cover;\n`;\n\nconst SliderWrapper = styled.div`\n  /* position: relative; */\n  padding: 20px 0;\n  padding-top: 50px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: black;\n  gap: 20px;\n`;\nconst Title = styled.h2`\n  font-size: 68px;\n  margin-bottom: 20px;\n`;\nconst OverView = styled.p`\n  font-size: 30px;\n  width: 50%;\n`;\n\nconst Overlay = styled(motion.div)`\n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  opacity: 0;\n`;\n\nconst BigMovie = styled(motion.div)<{ $scrollY: number }>`\n  position: absolute;\n  width: 40vw;\n  height: 80vh;\n  top: ${(props) => props.$scrollY + 100}px;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  background-color: ${(props) => props.theme.black.lighter};\n  border-radius: 15px;\n  overflow: hidden;\n`;\n\nconst BigCover = styled.div`\n  width: 100%;\n  background-size: cover;\n  background-position: center center;\n  height: 400px;\n`;\nconst BigTitle = styled.h3`\n  color: ${(props) => props.theme.white.lighter};\n  padding: 20px;\n  font-size: 46px;\n  position: relative;\n  top: -80px;\n`;\n\nconst BigOverview = styled.p`\n  padding: 20px;\n  position: relative;\n  top: -80px;\n  color: ${(props) => props.theme.white.lighter};\n`;\n\nconst Subtitle = styled.h6`\n  font-size: 40px;\n  color: ${(props) => props.theme.white.lighter};\n`;\n\nexport default function TV() {\n  const navigate = useNavigate();\n  const moviePathMatch: PathMatch<string> | null = useMatch(\"/tvs/:id\");\n\n  const {\n    onTheAirTvs,\n    airingTvs,\n    popularTvs,\n    topRatedTvs,\n    isFetchingOnTheAir,\n    isFetchingAiring,\n    isFetchingPopular,\n    isFetchingTopRated,\n  } = useGetTvsData();\n\n  const { scrollY } = useScroll();\n\n  const onOverlayClick = () => navigate(`/tvs`);\n  const clickedMovie =\n    moviePathMatch?.params.id &&\n    [onTheAirTvs, airingTvs, topRatedTvs, popularTvs]\n      .flatMap((data) => data?.results || [])\n      .find((movie) => String(movie.id) === moviePathMatch.params.id);\n\n  return (\n    <Wrapper>\n      {isFetchingOnTheAir || isFetchingAiring || isFetchingPopular || isFetchingTopRated ? (\n        <Loader> Loading...</Loader>\n      ) : (\n        <>\n          <Banner $bgPhoto={makeImagePath(airingTvs?.results[0].backdrop_path || \"\")}>\n            <Title>{airingTvs?.results[0].original_name}</Title>\n            <OverView>{airingTvs?.results[0].overview}</OverView>\n            <SliderWrapper>\n              <Subtitle>Airing Today</Subtitle>\n              <TvSlider data={airingTvs} />\n            </SliderWrapper>\n          </Banner>\n          <ContentWrapper>\n            <Subtitle>On The Air</Subtitle>\n            <TvSlider data={onTheAirTvs} />\n            <Subtitle>Popular movies</Subtitle>\n            <TvSlider data={popularTvs} />\n            <Subtitle>Top Rated</Subtitle>\n            <TvSlider data={topRatedTvs} />\n          </ContentWrapper>\n\n          <AnimatePresence>\n            {moviePathMatch ? (\n              <>\n                <Overlay onClick={onOverlayClick} exit={{ opacity: 0 }} animate={{ opacity: 1 }} />\n                <BigMovie layoutId={moviePathMatch.params.id} $scrollY={scrollY.get()}>\n                  {clickedMovie && (\n                    <>\n                      <BigCover\n                        style={{\n                          backgroundImage: `linear-gradient(to top, black, transparent), url(${makeImagePath(\n                            clickedMovie.backdrop_path,\n                            \"w500\",\n                          )})`,\n                        }}\n                      />\n                      <BigTitle>{clickedMovie.name}</BigTitle>\n                      <BigOverview>{clickedMovie.overview}</BigOverview>\n                    </>\n                  )}\n                </BigMovie>\n              </>\n            ) : null}\n          </AnimatePresence>\n        </>\n      )}\n    </Wrapper>\n  );\n}\n","export function makeImagePath(id: string, format?: string) {\n  return `https://image.tmdb.org/t/p/${format ? format : \"original\"}/${id}`\n}"],"names":["API_KEY","process","BASE_PATH","getOnTheAirTvs","fetch","then","response","json","getAiringTvs","getTopLatedTvs","getPopularTs","useGetTvsData","onTheAirTvsQuery","useQuery","queryKey","queryFn","airingTvsQuery","popularTvsQuery","topRatedTvsQuery","onTheAirTvs","data","airingTvs","popularTvs","topRatedTvs","isFetchingOnTheAir","isFetching","isFetchingAiring","isFetchingPopular","isFetchingTopRated","error","Slider","styled","div","Row","motion","Box","_ref","$bgPhoto","css","Info","_ref2","theme","black","lighter","ArrowButton","_ref3","$left","boxVariants","normal","scale","hover","y","transition","delay","duration","type","rowVariants","hidden","direction","x","window","outerWidth","visible","exit","infoVariants","opacity","_ref4","navigate","useNavigate","index","setIndex","useState","setDirection","changeIndex","newDirection","prev","maxIndex","Math","ceil","results","length","_jsxs","children","_jsx","AnimatePresence","custom","initial","variants","animate","slice","map","tv","layoutId","String","id","whileHover","makeImagePath","backdrop_path","onClick","onBoxClicked","tvId","name","xmlns","viewBox","d","Wrapper","Loader","Banner","props","SliderWrapper","ContentWrapper","Title","h2","OverView","p","Overlay","BigMovie","$scrollY","BigCover","BigTitle","h3","white","BigOverview","Subtitle","h6","TV","moviePathMatch","useMatch","scrollY","useScroll","clickedMovie","params","flatMap","find","movie","_Fragment","original_name","overview","TvSlider","onOverlayClick","get","style","backgroundImage","format"],"sourceRoot":""}