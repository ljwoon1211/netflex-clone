{"version":3,"file":"static/js/488.ebabdee4.chunk.js","mappings":"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","sources":["../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/utils.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/isRestoring.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const parent = element.offsetParent;\n            const parentWidth = parent instanceof HTMLElement ? parent.offsetWidth || 0 : 0;\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n            size.right = parentWidth - size.width - size.left;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent, anchorX }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        right: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left, right } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        const x = anchorX === \"left\" ? `left: ${left}` : `right: ${right}`;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            ${x}px !important;\n            top: ${top}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useCallback, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, anchorX, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const memoizedOnExitComplete = useCallback((childId) => {\n        presenceChildren.set(childId, true);\n        for (const isComplete of presenceChildren.values()) {\n            if (!isComplete)\n                return; // can stop searching when any is incomplete\n        }\n        onExitComplete && onExitComplete();\n    }, [presenceChildren, onExitComplete]);\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: memoizedOnExitComplete,\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout\n        ? [Math.random(), memoizedOnExitComplete]\n        : [isPresent, memoizedOnExitComplete]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = (jsx(PopChild, { isPresent: isPresent, anchorX: anchorX, children: children }));\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { Children, isValidElement } from 'react';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n\nexport { getChildKey, onlyElements };\n","\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, anchorX = \"left\", }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return null;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && (safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove());\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n","import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key as keyof QueryObserverResult)\n          onPropTracked?.(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Select data if needed\n    if (options.select && newState.data !== undefined) {\n      // Memoize select result\n      if (\n        prevResult &&\n        newState.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(newState.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = newState.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && placeholderData !== undefined) {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\nexport type QueryErrorResetFunction = () => void\nexport type QueryErrorIsResetFunction = () => boolean\nexport type QueryErrorClearResetFunction = () => void\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: QueryErrorClearResetFunction\n  isReset: QueryErrorIsResetFunction\n  reset: QueryErrorResetFunction\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport type QueryErrorResetBoundaryFunction = (\n  value: QueryErrorResetBoundaryValue,\n) => React.ReactNode\n\nexport interface QueryErrorResetBoundaryProps {\n  children: QueryErrorResetBoundaryFunction | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function' ? children(value) : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<T extends (...args: Array<any>) => boolean>(\n  throwError: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow throwError function to override throwing behavior on a per-error basis\n  if (typeof throwError === 'function') {\n    return throwError(...params)\n  }\n\n  return !!throwError\n}\n\nexport function noop(): void {}\n","'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (\n    options.suspense ||\n    options.throwOnError ||\n    options.experimental_prefetchInRender\n  ) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n  suspense,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n  suspense: boolean | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    ((suspense && result.data === undefined) ||\n      shouldThrowError(throwOnError, [result.error, query]))\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  const originalStaleTime = defaultedOptions.staleTime\n\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => Math.max(originalStaleTime(...args), 1000)\n        : Math.max(originalStaleTime ?? 1000, 1000)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n","'use client'\nimport { QueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { DefaultError, QueryClient, QueryKey } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataOptions,\n  UndefinedInitialDataOptions,\n} from './queryOptions'\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  queryClient?: QueryClient,\n): UseQueryResult<TData, TError>\n\nexport function useQuery(options: UseQueryOptions, queryClient?: QueryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient)\n}\n","'use client'\nimport * as React from 'react'\n\nimport { isServer, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch,\n} from './suspense'\nimport { noop } from './utils'\nimport type {\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n  queryClient?: QueryClient,\n): QueryObserverResult<TData, TError> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof options !== 'object' || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object',\n      )\n    }\n  }\n\n  const client = useQueryClient(queryClient)\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = client.defaultQueryOptions(options)\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_beforeQuery?.(\n    defaultedOptions,\n  )\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  ensureSuspenseTimers(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  // this needs to be invoked before creating the Observer because that can create a cache entry\n  const isNewCacheEntry = !client\n    .getQueryCache()\n    .get(defaultedOptions.queryHash)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        client,\n        defaultedOptions,\n      ),\n  )\n\n  // note: this must be called before useSyncExternalStore\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  const shouldSubscribe = !isRestoring && options.subscribed !== false\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe\n          ? observer.subscribe(notifyManager.batchCalls(onStoreChange))\n          : noop\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, shouldSubscribe],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      throwOnError: defaultedOptions.throwOnError,\n      query: client\n        .getQueryCache()\n        .get<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >(defaultedOptions.queryHash),\n      suspense: defaultedOptions.suspense,\n    })\n  ) {\n    throw result.error\n  }\n\n  ;(client.getDefaultOptions().queries as any)?._experimental_afterQuery?.(\n    defaultedOptions,\n    result,\n  )\n\n  if (\n    defaultedOptions.experimental_prefetchInRender &&\n    !isServer &&\n    willFetch(result, isRestoring)\n  ) {\n    const promise = isNewCacheEntry\n      ? // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n      : // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n        client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n\n    promise?.catch(noop).finally(() => {\n      // `.updateResult()` will trigger `.#currentThenable` to finalize\n      observer.updateResult()\n    })\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"],"names":["PopChildMeasure","React","getSnapshotBeforeUpdate","prevProps","element","this","props","childRef","current","isPresent","parent","offsetParent","parentWidth","HTMLElement","offsetWidth","size","sizeRef","height","offsetHeight","width","top","offsetTop","left","offsetLeft","right","componentDidUpdate","render","children","PopChild","_ref","anchorX","id","useId","ref","useRef","nonce","useContext","MotionConfigContext","useInsertionEffect","x","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","jsx","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","useConstant","newChildrenMap","memoizedOnExitComplete","useCallback","childId","set","isComplete","values","context","useMemo","register","delete","Math","random","forEach","_","key","PresenceContext","Provider","value","Map","getChildKey","child","onlyElements","filtered","Children","isValidElement","push","AnimatePresence","propagate","isParentPresent","safeToRemove","usePresence","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","diffedChildren","setDiffedChildren","useState","renderedChildren","setRenderedChildren","useIsomorphicLayoutEffect","i","length","includes","get","join","exitingChildren","nextChildren","splice","forceRender","LayoutGroupContext","Fragment","undefined","onExit","has","isEveryExitComplete","isExitComplete","QueryObserver","Subscribable","constructor","client","options","super","pendingThenable","experimental_prefetchInRender","reject","Error","bindMethods","setOptions","Set","refetch","bind","onSubscribe","listeners","addObserver","shouldFetchOnMount","updateResult","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","resolveEnabled","_defaulted","shallowEqualObjects","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","resolveStaleTime","staleTime","nextRefetchInterval","getOptimisticResult","build","result","createResult","optimisticResult","getCurrentResult","shouldAssignObserverCurrentProperties","state","trackResult","onPropTracked","trackedResult","Object","keys","defineProperty","configurable","enumerable","trackProp","add","getCurrentQuery","arguments","fetch","fetchOptimistic","defaultedOptions","then","fetchOptions","cancelRefetch","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","setTimeout","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","prevResultOptions","queryInitialState","data","newState","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","fetchState","fetchStatus","error","errorUpdatedAt","status","select","replaceData","selectError","placeholderData","Date","now","isFetching","isPending","isError","isLoading","hasData","nextResult","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","finalizeThenableIfPossible","thenable","resolve","recreateThenable","pending","prevThenable","queryHash","reason","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","some","typedKey","onQueryUpdate","notifyManager","batch","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","createValue","isReset","clearReset","reset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","ensurePreventErrorBoundaryRetry","errorResetBoundary","useClearResetErrorBoundary","getHasError","throwError","params","IsRestoringContext","useIsRestoring","ensureSuspenseTimers","originalStaleTime","max","gcTime","willFetch","isRestoring","shouldSuspend","useQuery","queryClient","Observer","useQueryClient","getDefaultOptions","queries","_experimental_beforeQuery","isNewCacheEntry","shouldSubscribe","subscribed","onStoreChange","unsubscribe","subscribe","batchCalls","_experimental_afterQuery","finally","useBaseQuery"],"sourceRoot":""}